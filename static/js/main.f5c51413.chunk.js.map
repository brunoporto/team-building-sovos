{"version":3,"sources":["components/GraphBar.js","App.js","reportWebVitals.js","index.js"],"names":["chartData","labels","datasets","backgroundColor","borderColor","borderWidth","data","Ranking","props","interval","componentDidMount","setInterval","getData","url","axios","get","then","res","newData","Object","assign","setState","chartReference","React","createRef","state","clearInterval","this","ref","options","maintainAspectRatio","legend","display","scales","yAxes","ticks","fontSize","fontColor","plugins","datalabels","color","align","anchor","Component","App","className","GraphBar","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAMMA,G,OAAY,CAChBC,OAAQ,CAAC,eAAgB,SAAU,WAAY,aAAc,cAC7DC,SAAU,CACR,CACEC,gBAAiB,CACf,0BACA,0BACA,0BACA,0BACA,4BAEFC,YAAa,CACX,wBACA,wBACA,wBACA,wBACA,0BAEFC,YAAa,EACbC,KAAM,OA2EGC,E,kDAnEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAHRC,SAAW,KAEQ,EASnBC,kBAAoB,WAClB,EAAKD,SAAWE,YAAY,EAAKC,QAAS,KAC1C,EAAKA,WAXY,EAkBnBA,QAAU,WACR,IAAMC,EAAG,UA/CK,uCA+CL,6DACTC,IAAMC,IAAIF,GAAKG,MAAK,SAACC,GACnB,IAAIC,EAAUC,OAAOC,OAAO,GAAIpB,GAChCkB,EAAQhB,SAAS,GAAGI,KAAOW,EAAIX,KAC/B,EAAKe,SAAS,CAAEf,KAAMY,QArBxB,EAAKI,eAAiBC,IAAMC,YAE5B,EAAKC,MAAQ,CACXnB,KAAM,IALS,E,mEAejBoB,cAAcC,KAAKlB,Y,+BAanB,OACE,gCACE,qDACA,cAAC,gBAAD,CACEmB,IAAKD,KAAKL,eACVhB,KAAMqB,KAAKF,MAAMnB,KACjBuB,QAAS,CACPC,qBAAqB,EACrBC,OAAQ,CACNC,SAAS,EACT/B,OAAQ,CACN+B,SAAS,IAGbC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,SAAU,GACVC,UAAW,WAKnBC,QAAS,CACPC,WAAY,CACVP,SAAS,EACTQ,MAAO,QACPC,MAAO,QACPC,OAAQ,kB,GA5DFC,aCjBPC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAACC,EAAD,SCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.f5c51413.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { HorizontalBar } from \"react-chartjs-2\";\nimport \"chartjs-plugin-datalabels\";\n\nconst PROXY_URL = \"https://cors-anywhere.herokuapp.com/\";\nconst chartData = {\n  labels: [\"Quarenteners\", \"BoaMan\", \"Vencedor\", \"I.D.G.A.F.\", \"Quaranteam\"],\n  datasets: [\n    {\n      backgroundColor: [\n        \"rgba(255, 99, 132, 0.2)\",\n        \"rgba(54, 162, 235, 0.2)\",\n        \"rgba(255, 206, 86, 0.2)\",\n        \"rgba(75, 192, 192, 0.2)\",\n        \"rgba(153, 102, 255, 0.2)\",\n      ],\n      borderColor: [\n        \"rgba(255, 99, 132, 1)\",\n        \"rgba(54, 162, 235, 1)\",\n        \"rgba(255, 206, 86, 1)\",\n        \"rgba(75, 192, 192, 1)\",\n        \"rgba(153, 102, 255, 1)\",\n      ],\n      borderWidth: 1,\n      data: [],\n    },\n  ],\n};\n\nclass Ranking extends Component {\n  interval = null;\n\n  constructor(props) {\n    super(props);\n    this.chartReference = React.createRef();\n\n    this.state = {\n      data: {},\n    };\n  }\n\n  componentDidMount = () => {\n    this.interval = setInterval(this.getData, 30000);\n    this.getData();\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  getData = () => {\n    const url = `${PROXY_URL}https://dashfeed.nextcanvas.com/api/Widgets/Matrix/305011`;\n    axios.get(url).then((res) => {\n      let newData = Object.assign({}, chartData);\n      newData.datasets[0].data = res.data;\n      this.setState({ data: newData });\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <h3>Ranking das Equipes</h3>\n        <HorizontalBar\n          ref={this.chartReference}\n          data={this.state.data}\n          options={{\n            maintainAspectRatio: true,\n            legend: {\n              display: false,\n              labels: {\n                display: false,\n              },\n            },\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    fontSize: 16,\n                    fontColor: \"#fff\",\n                  },\n                },\n              ],\n            },\n            plugins: {\n              datalabels: {\n                display: true,\n                color: \"white\",\n                align: \"right\",\n                anchor: \"end\",\n              },\n            },\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","import \"./App.css\";\nimport GraphBar from \"./components/GraphBar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <GraphBar />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}